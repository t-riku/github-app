import Head from "next/head";
import { useLazyQuery } from "@apollo/client";
import styles from "../styles/Home.module.scss";
import { useState, useRef } from "react";
import { MdClear } from "react-icons/md";
import ReactLoading from "react-loading";
import { format } from "timeago.js";
import RepositoryIssues from "../components/Repositoryissues/RepositoryIssues";
import {
  SearchRepositoriesResult,
  SEARCH_REPOSITORIES,
  RepositoryEdge,
} from "../graphql/searchRepositories/searchRepositoriesTypes";
import { options } from "../Data/suggestionsData/suggestionsData";
import { Options } from "../Types/suggestionsTypes";

export default function Home() {
  // クエリを保持する状態変数
  const [query, setQuery] = useState<string>("");
  // ボタンで発火させるためにuseLazyQueryを使う
  const [searchRepositories, { loading, error, data, fetchMore }] =
    useLazyQuery(SEARCH_REPOSITORIES);

  // 選択したリポジトリを保持する状態変数
  const [selectedRepo, setSelectedRepo] = useState<string | null>(null);

  // inputElオブジェクト
  const inputEl = useRef<HTMLInputElement>(null);

  // inputにフォーカスしているかどうか
  const [isFocus, setIsFocus] = useState<boolean>(false);

  // フィルターにかけた配列をいれるための状態変数
  const [suggestions, setSuggestions] = useState<Options[]>([]);

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // suggestionsの表示をなくす
    setIsFocus(false);
    // コンポーネントの切り替えをするために
    setSelectedRepo(null);
    // searchRepositories 関数を呼び出すと、クエリが実行されます。クエリの変数は、 variables オブジェクトを渡して渡される
    searchRepositories({ variables: { query } });
  };

  const handleLoadMore = () => {
    fetchMore<SearchRepositoriesResult>({
      variables: { cursor: data?.search.pageInfo.endCursor },
      updateQuery: (previousResult, { fetchMoreResult }) => {
        const newRepositories = fetchMoreResult.search.edges;
        const pageInfo = fetchMoreResult.search.pageInfo;

        return newRepositories.length
          ? {
              search: {
                __typename: previousResult.search.__typename,
                repositoryCount: previousResult.search.repositoryCount,
                pageInfo: pageInfo,
                edges: [...previousResult.search.edges, ...newRepositories],
              },
            }
          : previousResult;
      },
    });
  };

  const handleClearBtn = () => {
    setQuery("");
    inputEl.current?.focus();
  };

  const handleRepoClick = (id: string) => {
    setSelectedRepo(id);
  };

  // inputフィールドのonChangeイベント
  const handleChange = (text: string): void => {
    // 入力した値をもとにフィルターをかける。
    let matches: Options[] = [];

    if (text.length > 0) {
      matches = options.filter((opt) => {
        // new RegExp = パターンでテキストを検索するために使用
        const regex = new RegExp(`${text}`, "gi");
        return opt.text.match(regex);
      });
    }

    // フィルターをかけた配列をsuggestionsのステートに入れる
    setSuggestions(matches);
    setQuery(text);
  };

  const handleWordClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    const target = e.target as HTMLButtonElement;
    setQuery(target.innerText);
  };

  return (
    <>
      <Head>
        <title>Github App</title>
        <meta
          name="description"
          content="Generated by Nextjs, Typescript and GitHub GraphQL API"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <form onSubmit={handleSubmit} className={styles.form}>
          <div className="">
            <div className={styles.searchFrame}>
              <input
                type="text"
                value={query}
                ref={inputEl}
                onFocus={() => setIsFocus(true)}
                onChange={(e) => handleChange(e.target.value)}
                className={styles.input}
                placeholder="repository name.."
              />
              <MdClear className={styles.clearBtn} onClick={handleClearBtn} />
            </div>
            {isFocus && query.length > 0 && (
              <div className={styles.suggestionsBox}>
                {/* optionsの配列を入力候補の部分に表示する */}
                {suggestions?.map((suggestion, i) => (
                  <div
                    key={i}
                    className={styles.suggestionsItem}
                    // 入力候補をクリックするとクリックした入力候補がinputフィールドに入力される。
                    // isFocusをfalseにすることで入力候補を非表示にする
                    onClick={async () => {
                      await setQuery(suggestion.text);
                      await setIsFocus(false);
                    }}
                  >
                    {suggestion.text}
                  </div>
                ))}
              </div>
            )}
          </div>

          <button type="submit" className={styles.searchBtn}>
            Search
          </button>
        </form>

        {loading && (
          <ReactLoading
            type="bubbles"
            color="black"
            height="50px"
            width="50px"
            className="mx-auto"
          />
        )}
        {error && (
          <p className="errorTxt">Sorry, there&apos;s been an error...</p>
        )}
        {data && selectedRepo === null && (
          <div>
            <div>
              {data.search.repositoryCount === 0 ? (
                <div className={styles.hitNum}>
                  <p className={styles.noHitTxt}>
                    1件もヒットしませんでした。
                    <br />
                    違う条件で検索してみてください！
                  </p>
                  <div className="">
                    <p>例えば..</p>
                    <div className={styles.wordsBox}>
                      <button
                        className={styles.wordsItem}
                        onClick={handleWordClick}
                      >
                        ChatGPT
                      </button>
                      <button
                        className={styles.wordsItem}
                        onClick={handleWordClick}
                      >
                        React
                      </button>
                      <button
                        className={styles.wordsItem}
                        onClick={handleWordClick}
                      >
                        TailwindCSS
                      </button>
                    </div>
                  </div>
                </div>
              ) : (
                <div>
                  <p className={styles.hitNum}>
                    <span>{data.search.repositoryCount}</span>件ヒットしました！
                  </p>
                  <ul className={styles.viewer}>
                    {data.search.edges.map(({ node }: RepositoryEdge) => (
                      <li key={node.id}>
                        <div
                          onClick={() => handleRepoClick(node.id)}
                          className={styles.viewer_flex}
                        >
                          <div className={styles.data_left}>
                            <p className={styles.name}> {node.name}</p>
                            {node.description ? (
                              <p className={styles.desc}>
                                📄 : {node.description}
                              </p>
                            ) : (
                              <p className={styles.noDesc}>
                                📄 : descriptionは設定されていません。
                              </p>
                            )}
                            <p className={styles.stargazer}>
                              ⭐️ : {node.stargazerCount}
                            </p>
                          </div>
                          <div className={styles.data_right}>
                            <p className={styles.updatedDay}>
                              {format(node.updatedAt)}
                            </p>
                          </div>
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>

            {data && data.search.pageInfo.hasNextPage && (
              <button
                onClick={handleLoadMore}
                disabled={loading}
                className={styles.loadBtn}
              >
                Load More
              </button>
            )}
          </div>
        )}

        {selectedRepo && (
          <RepositoryIssues
            id={selectedRepo}
            setSelectedRepo={setSelectedRepo}
          />
        )}
      </main>
    </>
  );
}
