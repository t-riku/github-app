import Head from "next/head";
import { useLazyQuery } from "@apollo/client";
import styles from "../styles/Home.module.css";
import { useState, useRef } from "react";
import { MdClear } from "react-icons/md";
import ReactLoading from "react-loading";
import { format } from "timeago.js";
import RepositoryIssues from "../components/Repositoryissues/RepositoryIssues";
import {
  SearchRepositoriesResult,
  SEARCH_REPOSITORIES,
} from "../graphql/searchRepositories/searchRepositoriesTypes";

export default function Home() {
  // クエリを保持する環境変数
  const [query, setQuery] = useState("");
  // ボタンで発火させるためにuseLazyQueryを使う
  const [searchRepositories, { loading, error, data, fetchMore }] =
    useLazyQuery(SEARCH_REPOSITORIES);

  // 選択したリポジトリを保持する環境変数
  const [selectedRepo, setSelectedRepo] = useState(null);

  // inputElオブジェクト
  const inputEl = useRef<HTMLInputElement>(null);

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // コンポーネントの切り替えをするために
    setSelectedRepo(null);
    // searchRepositories 関数を呼び出すと、クエリが実行されます。クエリの変数は、 variables オブジェクトを渡して渡される
    searchRepositories({ variables: { query } });
  };

  const handleLoadMore = () => {
    fetchMore<SearchRepositoriesResult>({
      variables: { cursor: data?.search.pageInfo.endCursor },
      updateQuery: (previousResult, { fetchMoreResult }) => {
        const newRepositories = fetchMoreResult.search.edges;
        const pageInfo = fetchMoreResult.search.pageInfo;

        return newRepositories.length
          ? {
              search: {
                __typename: previousResult.search.__typename,
                repositoryCount: previousResult.search.repositoryCount,
                pageInfo: pageInfo,
                edges: [...previousResult.search.edges, ...newRepositories],
              },
            }
          : previousResult;
      },
    });
  };

  const handleClearBtn = () => {
    setQuery("");
    inputEl.current?.focus();
  };

  const handleRepoClick = (id: any) => {
    setSelectedRepo(id);
  };

  return (
    <>
      <Head>
        <title>Github App</title>
        <meta
          name="description"
          content="Generated by Nextjs, Typescript and GitHub GraphQL API"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.searchFrame}>
            <input
              type="text"
              value={query}
              ref={inputEl}
              // autoFocus={true}
              onChange={(event) => setQuery(event.target.value)}
              className={styles.input}
            />
            <MdClear className={styles.clearBtn} onClick={handleClearBtn} />
          </div>

          <button type="submit" className={styles.searchBtn}>
            Search
          </button>
        </form>

        {loading && (
          <ReactLoading
            type="bubbles"
            color="black"
            height="50px"
            width="50px"
            className="mx-auto"
          />
        )}
        {error && (
          <p className={styles.errorTxt}>
            Sorry, there&apos;s been an error...
          </p>
        )}
        {data && selectedRepo === null && (
          <div>
            <div>
              {data.search.repositoryCount === 0 ? (
                <div className={styles.hitNum}>
                  <p>
                    1件もヒットしませんでした。
                    <br />
                    違う条件で検索してみてください！
                  </p>
                  <div className="">
                    <p>例えば..</p>
                    <div className="">
                      <span className="">ChatGPT</span>
                      <span className="">React</span>
                      <span className="">TailwindCSS</span>
                      <span>
                        上記の要素はbuttonになっていて、押すとinput属性のvalueに値が入り、それで検索をかける
                        <br />
                        これを最初の初期ページにしてもいいかも
                      </span>
                    </div>
                  </div>
                </div>
              ) : (
                <div>
                  <p className={styles.hitNum}>
                    <span>{data.search.repositoryCount}</span>件ヒットしました！
                  </p>
                  <ul className={styles.viewer}>
                    {data.search.edges.map(({ node }: any) => (
                      <li key={node.id}>
                        <div
                          onClick={() => handleRepoClick(node.id)}
                          className={styles.viewer_flex}
                        >
                          <div className={styles.data_left}>
                            <p className={styles.name}> {node.name}</p>
                            {node.description ? (
                              <p className={styles.desc}>
                                📄 : {node.description}
                              </p>
                            ) : (
                              <p className={styles.noDesc}>
                                📄 : descriptionは設定されていません。
                              </p>
                            )}
                            <p className={styles.stargazer}>
                              ⭐️ : {node.stargazerCount}
                            </p>
                          </div>
                          <div className={styles.data_right}>
                            <p className={styles.updatedDay}>
                              {format(node.updatedAt)}
                            </p>
                          </div>
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>

            {data && data.search.pageInfo.hasNextPage && (
              <button
                onClick={handleLoadMore}
                disabled={loading}
                className={styles.loadBtn}
              >
                Load More
              </button>
            )}
          </div>
        )}

        {selectedRepo && (
          <RepositoryIssues
            id={selectedRepo}
            setSelectedRepo={setSelectedRepo}
          />
        )}
      </main>
    </>
  );
}
