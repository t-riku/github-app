import Head from "next/head";
import Image from "next/image";
import {
  ApolloClient,
  createHttpLink,
  InMemoryCache,
  gql,
} from "@apollo/client";
import { setContext } from "@apollo/client/link/context";
import styles from "../styles/Home.module.css";
import { useState, useEffect } from "react";
import Link from "next/link";
import { AiFillGithub } from "react-icons/ai";
import { DiGithubFull } from "react-icons/di";
import { QueryDocumentKeys } from "graphql/language/ast";

type Items = {
  id: string;
  __typename: string;
  name: string;
  description?: string;
  createdAt: string;
  updatedAt: string;
  url?: string;
};

export default function Home({ items }: any) {
  const [showItems, setShowItems] = useState([]);

  useEffect(() => {
    setShowItems(items);
  }, []);

  // 一致しているものを返す関数
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const result = items.filter((items: any) => {
      // return item.title.toLowerCase().match(e.target.value.toLowerCase());
      return items.name
        .trim()
        .toLowerCase()
        .match(e.target.value.toLowerCase());
    });
    console.log(result);
    setShowItems(result);
  };

  return (
    <div className={styles.home}>
      <Head>
        <title>Github App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        <h1 className={styles.title}>Github Repository Viewer!</h1>
        <Link href="https://github.com/t-riku/github-app">
          <div className={styles.animateGithub}>
            <DiGithubFull className={styles.textGithub} />
            <div className={styles.circle01}></div>
            <div className={styles.circle02}></div>
            <div className={styles.circle03}></div>
          </div>
        </Link>
      </header>

      <main className={styles.main}>
        <form action="" className={styles.form}>
          <input
            type="text"
            placeholder="input repository name"
            onChange={(e) => handleChange(e)}
          />
        </form>

        {showItems ? (
          <>
            <div className={styles.viewer}>
              {showItems.map((item: any, index: number) => {
                return (
                  <ul key={index}>
                    <li>
                      {/* リンク先を指定 */}
                      <Link href={`/${item.id}`} className={styles.issueLink}>
                        <div className={styles.flex}>
                          {item.name}
                          {/* <object data="" type="">
                            <Link href={item.url} className={styles.github}>
                              <AiFillGithub />
                            </Link>
                          </object> */}
                        </div>
                      </Link>
                    </li>

                    {item.description ? (
                      <li key={item.description} className={styles.desc}>
                        {item.description}
                      </li>
                    ) : (
                      ""
                    )}
                  </ul>
                );
              })}
            </div>
          </>
        ) : (
          <>
            <p>候補がありませんでした。</p>
          </>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
        <p>created with Nextjs, Typescript and GitHub GraphQL API</p>
      </footer>
    </div>
  );
}

export async function getStaticProps() {
  const httpLink = createHttpLink({
    uri: "https://api.github.com/graphql",
  });

  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,
      },
    };
  });

  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      {
        user(login: "t-riku") {
          name
          url
          repositories(last: 30) {
            totalCount
            nodes {
              id
              name
              description
              createdAt
              updatedAt
              url
            }
          }
        }
      }
    `,
  });

  const { user } = data;
  const items = user.repositories.nodes.map((edge: Items) => edge);

  return {
    props: {
      items,
    },
  };
}
